const _ = require('lodash');
const webpack = require('webpack');
const path = require('path');
const pkg = require('../package.json');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const ExtractTextPlugin = require("extract-text-webpack-plugin");

const SRC_PATH = path.join(__dirname, '../src');
const DEST_PATH = path.join(__dirname, '../www');
const SASS_PATH = path.join(__dirname, '../scss');
var TARGET = process.env.npm_lifecycle_event;

const replaceConfig = {
	'webpack': [
		{from: 'ENV', to: 'qa'},
		{from: '\'DEBUG\'', to: 'true'},
		{from: '\'PROFILER\'', to: 'false'},
		{from: 'AUTHUSERNAME', to: 'fxmobiletest6@gs.com'},
		{from: 'AUTHPASSWORD', to: 'gsmark2'}],
	/*add config to override*/
	"webpack:prod": [],


};

module.exports = [{
	name: 'js',
	devtool: 'source-map',

	entry: {
		app: [path.resolve(SRC_PATH, 'app/app.module.js')],
		vendor: Object.keys(pkg.dependencies)
	},

	output: {
		path: path.resolve(DEST_PATH, 'js'),
		filename: '[name].js',
		sourceMapFileName: '[name].map',
		publicPath: '/js/'
	},

	module: {
		loaders: [
			{test: /\.html$/, loader: 'html-loader'}

		],
		preLoaders: [
			{
				test: /\.js$/, // include .js files
				exclude: /node_modules/, // exclude any and all files in the node_modules folder
				loader: "jshint"
			}
		]
	},

	plugins: [
		/*		// Defining global variables.
		 new webpack.DefinePlugin({
		 'process.env': {
		 ENV: JSON.stringify(process.env.NODE_ENV || 'development')
		 }
		 }),*/
		new CopyWebpackPlugin([
			{
				context: SRC_PATH,
				from: 'assets/**/*',
				to: DEST_PATH
			}
		]),
		new CopyWebpackPlugin([
			{
				context: SRC_PATH,
				from: '*.*',
				to: DEST_PATH,
				transform: (contnet, path)=> {
					var newContent = contnet;
					//Replace strings are needed
					if (path.endsWith('buildInfo.js')) {
						var replaceArr = replaceConfig[TARGET] || replaceConfig['webpack'];
						replaceArr.forEach(conf=> newContent = _.replace(newContent, conf.from, conf.to));
					}
					return newContent;
				}
			}
		])
	],

	resolve: {
		root: [
			SRC_PATH
		],
		modulesDirectories: [
			'node_modules'
		],
		extensions: ['', '.js', '.ts', '.json', '.html'],
		alias: {
			blocks: path.join(__dirname, '../src/app/blocks'),
			core: path.join(__dirname, '../src/app/core'),
			features: path.join(__dirname, '../src/app/features'),
		},
		unsafeCache: false
	}
}, {
	/**
	 * Seprating the sass compile as per the below doc
	 * http://eng.localytics.com/faster-sass-builds-with-webpack/
	 */
	name: 'css',
	entry: {
		main: path.resolve(SRC_PATH, 'scss/main.scss')
	},
	output: {
		path: path.resolve(DEST_PATH, 'css'),
		filename: 'css.js',
		publicPath: '/css/'
	},
	module: {
		loaders: [
			{
				test: /\.scss$/,
				loader: ExtractTextPlugin.extract("style", "css!sass")
			},
			{
				test: /\.(png|jpg|gif)$/,
				include: path.resolve(SRC_PATH, 'assets'),
				loader: 'url-loader?limit=30000'
			},
			{
				test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
				include: path.resolve(SRC_PATH, 'assets'),
				loader: "url-loader?limit=30000&mimetype=application/font-woff"
			},
			{
				test: /\.(ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
				include: path.resolve(SRC_PATH, 'assets'),
				loader: "file-loader"
			}
		]
	},
	plugins: [
		new ExtractTextPlugin("main.css")
	]

}];
